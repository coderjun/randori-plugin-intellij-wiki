In this lesson, you will continue to use Randori Guice, a Randori specific port of Google’s dependency injection framework. You will learn about how Guice makes the decision on what objects to inject, and how to vary that decision at any point in the application. You will also learn about the default context and scope modifiers.

1. Ensure you have the SimpleTest project you created in earlier lessons open in IntelliJ.

2. Open and examine your IndexMediator class. 

   As you may remember, the constructor accepts a MessageGenerator instance. This instance is built by Guice 
   when it is needed. By default, Guice will build any object by recursively examining the object’s definition 
   and loading any dependencies that are needed. 

   As was the case with IndexMediator, Guice determined that MessageGenerator was required first, and hence 
   loaded it and instantiated it in order to finish the creation of the IndexMediator. There is no limit to 
   the depth of dependencies.

   However, you can modify the default way in which Guice chooses to build a dependency. That modification is 
   done via a special type of object called a context which extends an object called GuiceModule.

3. Right click on the messages package, choose New->Randori Class. Name this class BoringMessageGenerator.

4. Alter this class so that it extends from MessageGenerator

5. Inside of BoringMessageGenerator, override the newMessage() method as show below:

     override public function newMessage():Message {
       return new Message("Boring Message", "Yawn" );
     }

   Now, you have a BoringMessageGenerator. You want to use this generator in place of the original  
   MessageGenerator. You will do so using a context.

6. Create a new package under src called contexts.

7. Right click on the contexts package, New->Randori Context. Name the class BoringContext


9. Inside the configure() method, call the bind() method of the Binder instance, passing it the MessageGenerator class. 
   Call the to() method on the returned object and pass it the BoringMessageGenerator as show below.

     override public function configure(binder:Binder):void {
       binder.bind(MessageGenerator).to(BoringMessageGenerator);
     }

   The Binder instance passed to this method keeps track of the rules Guice uses to inject various dependencies.  You are then  asking Guice to substitute the BoringMessageGenerator for the original MessageGenerator anywhere it is   
   requested. Next you will need to instruct Randori Guice to use this context in your application.

10. Open the behaviors.css file from the assets folder.

11. Modify the simpleApp class selector with the following code:

      .simpleApp {
        -randori-context: "contexts.BoringContext";
        -randori-mediator: "mediators.IndexMediator";
      }

    This tells Randori that, at the point where it finds the simpleApp class, you wish to begin using a new 
    Context called BoringContext. Contexts can be defined anywhere in the DOM and apply to all nodes 
    underneath the node where the context is applied. The order of context versus mediator in the selector 
    does not matter.

12. <b>[NOTE, an error in SDK versions 0.2.1 and below will cause this to fail. This will be fixed as of version 0.2.2]</b> Save, rebuild and run your application.

    This time you will see the message is derived from your BoringMessageGenerator as you have told Guice to 
    use that version instead.

    There are other things you can do with the binder, for example:

      binder.bind(MessageGenerator).inScope(Scope.Singleton).to(MessageGenerator);

    This tells Randori Guice to always inject the same copy of MessageGenerator, effectively making it a 
    singleton.

      var mySpeciallyConfiguredMessage:MessageGenerator = new MessageGenerator();
      binder.bind(MessageGenerator).toInstance(mySpeciallyConfiguredMessage);

    This version tells Randori Guice to always inject your super special instance everywhere rather than 
    create one on its own. There are other more complicated use cases that will be explored later.

    This work with contexts provides for two interesting points, first, your application can have as many 
    contexts as you wish. Each manages the node and children of the node to which it is applied. 

    Second, contexts interact with each other. For example, Randori has a default context that it uses for any    
    Randori application. It looks like this:

      override public function configure(binder:Binder):void {
        //make the StyleExtensionMap a Singleton
        binder.bind(StyleExtensionMap).inScope(Scope.Singleton).to(StyleExtensionMap);
  
        //Setup a NoOp translator as the default
        binder.bind( AbstractTranslator ).to( NoOpTranslator );
      }

    When you create your new context it does not eliminate the rules from the default. Instead the two 
    interact. The default Randori context manages all object construction for all nodes directly in its 
    descendants. However, once the BoringContext is created, it now becomes the _primary_ context for creating 
    children under the new context. 

    I say primary because, in the event that you ask for something and the BoringContext does not have a 
    specific rule for building it, and the parent context does have a specific rule, then the parent context 
    fulfills the dependency.

    Imagine that you have an object under the body that requires a StyleExtensionMap. This particular object 
    has been specified as a singleton in the parent context, but no rule exists in the BoringContext. In this 
    case, the more specific rule from the parent context will cause the StyleExtensionMap to be of the same 
    shared instance used by the entire application.

    In effect, contexts cascade. This means rules can override each other for areas of an application but you 
    do not need to redefine rules in lower contexts to have them available.

As a last point, a context can be placed on any node, not just the body.

In the next lesson you will look more into Randori helper components with the {Randori ViewStack}[https://github.com/RandoriAS/randori-plugin-intellij/wiki/Lesson-9:-Dynamic-Loading-with-ViewStack].