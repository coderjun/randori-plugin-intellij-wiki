<b>Please Note:</b> There is a new plugin version available which requires an SDK change, {please read for more details:}[https://github.com/RandoriAS/randori-plugin-intellij/wiki/Instructions-for-updating-your-Plugin].

In this lesson, you will use CSS to eliminate the data-* attributes in your code, allowing for a cleaner experience with HTML developers, promoting a simpler syntax for reuse, and allowing for a level of indirection in the behavior choices for Randori.

1. Ensure you have the SimpleTest project you created in earlier lessons open in IntelliJ

2. Right click on the SimpleTest project and create a new Directory named assets

3. Right click on the assets folder and create a new file. Name the file behaviors.css

4. Inside of behaviors.css add class selector for simpleApp

     .simpleApp {
     }

5. Inside of the selector, add a style for –randori-mediator: mediators.IndexMediator;

     .simpleApp {
       -randori-mediator: "mediators.IndexMediator";
     }

   Randori introduces some specific styles of its own, to allow you to define behaviors in CSS.  It is 
   possible to mix these with traditional regular CSS style sheets, but it is recommended to keep them 
   separate in their own  Behavior Style Sheet is a better practice.

   In this case you are indicating that anything with the CSS class simpleApp will use an instance of the IndexMediator class as a mediator.

6. Next, add a new selector named messageWindow. Inside of the selector, add a style for –randori-behavior: 
   behaviors.MessageWindow;

     .messageWindow {
       -randori-behavior: "behaviors.MessageWindow";
     }

7. Save your style sheet and return to the index.html

8. Inside the head of your html page, before your script tags, add the following tag:

     <link rel="stylesheet/randori" href="assets/behaviors.css" type="text/css"/>

   Notice the value of the rel attribute, “stylesheet/randori” instead of just “stylesheet” as you would normally expect.  This indicates to the framework that there are randori specific values which should be parsed out and applied before the browser attempts to use the stylesheet otherwise.

9. Find the body tag and remove the data-mediator="mediators.IndexMediator"

10. Add a class attribute to the body and specify simpleApp

      <body class="simpleApp">

11. Next, find the messageWindow div and remove the data-behavior="behaviors.MessageWindow"

12. Add a class attribute to this div and specify a class of messageWindow
    
      <div id="messageWindow" class="messageWindow">
        <div id="title">Simple Test</div>
        <div id="message">My Message</div>
      </div>

    Using CSS in this manner makes it extraordinarily easy for your team to create a set of commonly used CSS 
    behaviors to your application and then vary those behaviors in an application wide manner.

13. Save, build and run your application.

    Everything should work as before, but now working from the CSS defined mediator and behaviors.

In the next lesson, you will learn about {Randori’s dependency injection framework (Guice)}[https://github.com/RandoriAS/randori-plugin-intellij/wiki/Lesson-07:-Dependency-Injection] as you build and inject objects into your mediators.